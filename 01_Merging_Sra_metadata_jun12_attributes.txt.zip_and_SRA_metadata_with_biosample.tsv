Lets have a look of what the file looks like

Then we need to collect samples with keywords female, male, disease, age, bmi, and antibiotics.

```
bash

unzip -p Sra_metadata_jun12_attributes.txt.zip Sra_metadata_jun12_attributes.txt | head -n 5

{
  unzip -p Sra_metadata_jun12_attributes.txt.zip | head -n 1
  unzip -p Sra_metadata_jun12_attributes.txt.zip | grep -Eiw 'female|male|disease|age|bmi|antibiotics'
} > metadata_matches2.txt

head -n 5 metadata_matches2.txt

```
Create a python script to unpack the "jattr" column (unpack_jattr.py).

```
import pandas as pd
import json

df = pd.read_csv("metadata_matches2.txt", sep=",", engine="python")

def parse_json_safe(s):
    try:
        return json.loads(s)
    except json.JSONDecodeError:
        return {}

jattr_dicts = df['jattr'].apply(parse_json_safe)
jattr_expanded = pd.json_normalize(jattr_dicts)
df_flat = pd.concat([df.drop(columns=['jattr']), jattr_expanded], axis=1)

df_flat.to_csv("SRA_metadata_jun12.csv", index=False)

```
Run in bash

```
python3 -m pip install pandas
#version 2.3.3

python3 unpack_jattr.py
```

### Lets take a look of the file

```
bash

wc -l SRA_metadata_jun12.csv
# 17718 rows

awk -F',' '{print NF; exit}' SRA_metadata_jun12.csv
# 2132 columns

```
Filter Gender

```
python

```
import pandas as pd
import ast

# Load your flattened metadata
df = pd.read_csv("SRA_metadata_jun12.csv", low_memory=False)

# -------------------------------
# ðŸ§¬ Extract Gender Information
# -------------------------------

# Find all columns that look like they relate to sex or gender
sex_cols = [c for c in df.columns if "sex" in c.lower() or "gender" in c.lower()]
print("ðŸ§¬ Found possible sex-related columns:", sex_cols)

# Function to extract 'male'/'female' safely
def extract_gender(val):
    if pd.isna(val):
        return None
    if isinstance(val, str) and val.strip().startswith("["):
        try:
            parsed = ast.literal_eval(val)
            if isinstance(parsed, list) and len(parsed) > 0:
                val = parsed[0]
        except:
            pass
    val = str(val).strip().lower()
    if "female" in val:
        return "female"
    if "male" in val:
        return "male"
    return None

# Create a clean Gender column
df["Gender"] = df[sex_cols].apply(lambda row: next(
    (extract_gender(v) for v in row if extract_gender(v) is not None), None), axis=1)

# Drop original sex/gender columns
df = df.drop(columns=sex_cols)

# -------------------------------
# ðŸ§ª Extract Sample Type
# -------------------------------

# Find columns that might relate to environment or sample type
sample_cols = [c for c in df.columns if "environment" in c.lower() or "sample" in c.lower()]
print("ðŸ§ª Found possible sample-related columns:", sample_cols)

# Function to detect fecal-related sample types
def detect_feces(val):
    if pd.isna(val):
        return None
    val = str(val).strip().lower()
    if any(keyword in val for keyword in ["stool", "feces", "human gut"]):
        return "feces"
    return None

# Create a Sample type column
df["Sample type"] = df[sample_cols].apply(lambda row: next(
    (detect_feces(v) for v in row if detect_feces(v) is not None), None), axis=1)

# Move Gender and Sample type near the front
cols = list(df.columns)
for col in ["Gender", "Sample type"]:
    if col in cols:
        cols.insert(1, cols.pop(cols.index(col)))
df = df[cols]


df.to_csv("metadata_gender_sample.csv", index=False)
print("âœ… Created 'metadata_gender_sample.csv' with Gender and Sample type columns.")

