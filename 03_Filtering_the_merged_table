
## collect columns to make a new data

```
import pandas as pd
import re

# 1. Load merged file

merged_file = "merged_full_with_duplicates.tsv"
merged = pd.read_csv(merged_file, sep="\t", dtype=str, low_memory=False)

print(f"Loaded merged file with {merged.shape[0]} rows and {merged.shape[1]} columns.")


# 2. Columns to ALWAYS keep
# (all columns from SRA metadata + spire_sample_name)
sra_full = pd.read_csv("SRA_metadata_with_biosample_corrected.txt", sep=",", dtype=str)

sra_columns = set(sra_full.columns)

always_keep = set(sra_columns)
always_keep.add("spire_sample_name")

# 3. Keyword categories we WANT to keep from human metadata
# (flexible, case-insensitive)

keywords = [
    "bmi",
    "body mass",
    "antibiotic",
    "antimicrobial",
    "drug",
    "sex",
    "gender",
    "age",
    "disease",
    "diagnosis",
    "condition",
    "infection",
    "immune",
    "inflammation",
    "therapy",
    "treatment"
]


# 4. Keywords to EXCLUDE
# (Columns containing these will be dropped)

exclude_keywords = [
    "sexual",       
    "private",
    "identifier",
    "confidential",
    "contact",
    "gestational",
    "beverages",
    "stage",
    "vitamin"
]


def is_unwanted(col):
    col_low = col.lower()
    return any(bad in col_low for bad in exclude_keywords)


# 5. Determine which columns match keyword categories

def matches_category(col):
    col_low = col.lower()
    return any(re.search(rf"{kw}", col_low) for kw in keywords)

keyword_columns = {c for c in merged.columns if matches_category(c)}

# 6. Compute the final set of columns to keep

columns_to_keep = (always_keep | keyword_columns)

columns_to_keep = {c for c in columns_to_keep if not is_unwanted(c)}

columns_to_keep = sorted([c for c in columns_to_keep if c in merged.columns])

print(f"\nTotal columns kept: {len(columns_to_keep)}")

# 7. Create cleaned dataframe

merged_cleaned = merged[columns_to_keep]

# 8. Save output

output_file = "merged_filtered_cleaned.tsv"
merged_cleaned.to_csv(output_file, sep="\t", index=False)

print(f"\n✅ Cleaned dataset saved to: {output_file}")
print(f"✅ Final shape: {merged_cleaned.shape[0]} rows x {merged_cleaned.shape[1]} columns")

```




